//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct User: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var email: String?
    public var givenName: String?
    public var familyName: String?
    public var uid: String?
    public var schacHomeOrganization: String?
    public var password: String?
    public var newUser: Bool?
    public var preferredLanguage: String?
    public var webAuthnIdentifier: String?
    public var userHandle: String?
    public var forgottenPassword: Bool?
    public var enrollmentVerificationKey: String?
    public var createFromInstitutionKey: String?
    public var attributes: [String: [String]]?
    public var surfSecureId: [String: AnyCodable]?
    public var publicKeyCredentials: [PublicKeyCredentials]?
    public var linkedAccounts: [LinkedAccount]?
    public var eduIDS: [EduID]?
    public var created: Int64?
    public var updatedAt: Int64?
    public var trackingUuid: String?
    public var lastSeenAppNudge: Int64?
    public var eduPersonPrincipalName: String?

    public init(id: String? = nil, email: String? = nil, givenName: String? = nil, familyName: String? = nil, uid: String? = nil, schacHomeOrganization: String? = nil, password: String? = nil, newUser: Bool? = nil, preferredLanguage: String? = nil, webAuthnIdentifier: String? = nil, userHandle: String? = nil, forgottenPassword: Bool? = nil, enrollmentVerificationKey: String? = nil, createFromInstitutionKey: String? = nil, attributes: [String: [String]]? = nil, surfSecureId: [String: AnyCodable]? = nil, publicKeyCredentials: [PublicKeyCredentials]? = nil, linkedAccounts: [LinkedAccount]? = nil, eduIDS: [EduID]? = nil, created: Int64? = nil, updatedAt: Int64? = nil, trackingUuid: String? = nil, lastSeenAppNudge: Int64? = nil, eduPersonPrincipalName: String? = nil) {
        self.id = id
        self.email = email
        self.givenName = givenName
        self.familyName = familyName
        self.uid = uid
        self.schacHomeOrganization = schacHomeOrganization
        self.password = password
        self.newUser = newUser
        self.preferredLanguage = preferredLanguage
        self.webAuthnIdentifier = webAuthnIdentifier
        self.userHandle = userHandle
        self.forgottenPassword = forgottenPassword
        self.enrollmentVerificationKey = enrollmentVerificationKey
        self.createFromInstitutionKey = createFromInstitutionKey
        self.attributes = attributes
        self.surfSecureId = surfSecureId
        self.publicKeyCredentials = publicKeyCredentials
        self.linkedAccounts = linkedAccounts
        self.eduIDS = eduIDS
        self.created = created
        self.updatedAt = updatedAt
        self.trackingUuid = trackingUuid
        self.lastSeenAppNudge = lastSeenAppNudge
        self.eduPersonPrincipalName = eduPersonPrincipalName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case givenName
        case familyName
        case uid
        case schacHomeOrganization
        case password
        case newUser
        case preferredLanguage
        case webAuthnIdentifier
        case userHandle
        case forgottenPassword
        case enrollmentVerificationKey
        case createFromInstitutionKey
        case attributes
        case surfSecureId
        case publicKeyCredentials
        case linkedAccounts
        case eduIDS
        case created
        case updatedAt
        case trackingUuid
        case lastSeenAppNudge
        case eduPersonPrincipalName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(givenName, forKey: .givenName)
        try container.encodeIfPresent(familyName, forKey: .familyName)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(schacHomeOrganization, forKey: .schacHomeOrganization)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(newUser, forKey: .newUser)
        try container.encodeIfPresent(preferredLanguage, forKey: .preferredLanguage)
        try container.encodeIfPresent(webAuthnIdentifier, forKey: .webAuthnIdentifier)
        try container.encodeIfPresent(userHandle, forKey: .userHandle)
        try container.encodeIfPresent(forgottenPassword, forKey: .forgottenPassword)
        try container.encodeIfPresent(enrollmentVerificationKey, forKey: .enrollmentVerificationKey)
        try container.encodeIfPresent(createFromInstitutionKey, forKey: .createFromInstitutionKey)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(surfSecureId, forKey: .surfSecureId)
        try container.encodeIfPresent(publicKeyCredentials, forKey: .publicKeyCredentials)
        try container.encodeIfPresent(linkedAccounts, forKey: .linkedAccounts)
        try container.encodeIfPresent(eduIDS, forKey: .eduIDS)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(trackingUuid, forKey: .trackingUuid)
        try container.encodeIfPresent(lastSeenAppNudge, forKey: .lastSeenAppNudge)
        try container.encodeIfPresent(eduPersonPrincipalName, forKey: .eduPersonPrincipalName)
    }
}

