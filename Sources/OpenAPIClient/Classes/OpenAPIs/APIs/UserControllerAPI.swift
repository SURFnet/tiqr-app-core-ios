//
// UserControllerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserControllerAPI {

    /**
     Confirm email change
     
     - parameter h: (query) The hash obtained from the query parameter &#39;h&#39; in the URL sent to the user in the update-email 
     - returns: UserResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func confirmUpdateEmail(h: String) async throws -> UserResponse {
        return try await confirmUpdateEmailWithRequestBuilder(h: h).execute().body
    }

    /**
     Confirm email change
     - GET /mobile/api/sp/confirm-email
     - Confirm the user has clicked on the link in the email sent after requesting to change the users email
     - parameter h: (query) The hash obtained from the query parameter &#39;h&#39; in the URL sent to the user in the update-email 
     - returns: RequestBuilder<UserResponse> 
     */
    open class func confirmUpdateEmailWithRequestBuilder(h: String) -> RequestBuilder<UserResponse> {
        let localVariablePath = "/mobile/api/sp/confirm-email"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "h": (wrappedValue: h.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     User details
     
     - returns: UserResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func me() async throws -> UserResponse {
        return try await meWithRequestBuilder().execute().body
    }

    /**
     User details
     - GET /mobile/api/sp/me
     - Retrieve the attributes of the current user
     - returns: RequestBuilder<UserResponse> 
     */
    open class func meWithRequestBuilder() -> RequestBuilder<UserResponse> {
        let localVariablePath = "/mobile/api/sp/me"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Change email
     
     - parameter updateEmailRequest: (body)  
     - parameter force: (query)  (optional, default to false)
     - returns: String
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateEmail(updateEmailRequest: UpdateEmailRequest, force: Bool? = nil) async throws -> String {
        return try await updateEmailWithRequestBuilder(updateEmailRequest: updateEmailRequest, force: force).execute().body
    }

    /**
     Change email
     - PUT /mobile/api/sp/email
     - Request to change the email of the user. A validation email will be send containing an URL with an unique 'h' query param
     - parameter updateEmailRequest: (body)  
     - parameter force: (query)  (optional, default to false)
     - returns: RequestBuilder<String> 
     */
    open class func updateEmailWithRequestBuilder(updateEmailRequest: UpdateEmailRequest, force: Bool? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/mobile/api/sp/email"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateEmailRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "force": (wrappedValue: force?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Change names
     
     - parameter updateUserNameRequest: (body)  
     - returns: UserResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateUserProfile(updateUserNameRequest: UpdateUserNameRequest) async throws -> UserResponse {
        return try await updateUserProfileWithRequestBuilder(updateUserNameRequest: updateUserNameRequest).execute().body
    }

    /**
     Change names
     - PUT /mobile/api/sp/update
     - Update the givenName and / or familyName of the User
     - parameter updateUserNameRequest: (body)  
     - returns: RequestBuilder<UserResponse> 
     */
    open class func updateUserProfileWithRequestBuilder(updateUserNameRequest: UpdateUserNameRequest) -> RequestBuilder<UserResponse> {
        let localVariablePath = "/mobile/api/sp/update"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserNameRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
