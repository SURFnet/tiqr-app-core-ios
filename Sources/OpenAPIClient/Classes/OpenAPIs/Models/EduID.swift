//
// EduID.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EduID: Codable, JSONEncodable, Hashable {

    public var serviceProviderEntityId: String?
    public var value: String?
    public var serviceName: String?
    public var serviceNameNl: String?
    public var serviceLogoUrl: String?
    public var serviceHomeUrl: String?
    public var serviceInstutionGuid: String?
    public var createdAt: Date?

    public init(serviceProviderEntityId: String? = nil, value: String? = nil, serviceName: String? = nil, serviceNameNl: String? = nil, serviceLogoUrl: String? = nil, serviceHomeUrl: String? = nil, serviceInstutionGuid: String? = nil, createdAt: Date? = nil) {
        self.serviceProviderEntityId = serviceProviderEntityId
        self.value = value
        self.serviceName = serviceName
        self.serviceNameNl = serviceNameNl
        self.serviceLogoUrl = serviceLogoUrl
        self.serviceHomeUrl = serviceHomeUrl
        self.serviceInstutionGuid = serviceInstutionGuid
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case serviceProviderEntityId
        case value
        case serviceName
        case serviceNameNl
        case serviceLogoUrl
        case serviceHomeUrl
        case serviceInstutionGuid
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(serviceProviderEntityId, forKey: .serviceProviderEntityId)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(serviceName, forKey: .serviceName)
        try container.encodeIfPresent(serviceNameNl, forKey: .serviceNameNl)
        try container.encodeIfPresent(serviceLogoUrl, forKey: .serviceLogoUrl)
        try container.encodeIfPresent(serviceHomeUrl, forKey: .serviceHomeUrl)
        try container.encodeIfPresent(serviceInstutionGuid, forKey: .serviceInstutionGuid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

