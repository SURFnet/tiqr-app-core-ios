//
// LinkedAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LinkedAccount: Codable, JSONEncodable, Hashable {

    public var institutionIdentifier: String?
    public var schacHomeOrganization: String?
    public var eduPersonPrincipalName: String?
    public var subjectId: String?
    public var givenName: String?
    public var familyName: String?
    public var eduPersonAffiliations: [String]?
    public var createdAt: Date?
    public var expiresAt: Date?

    public init(institutionIdentifier: String? = nil, schacHomeOrganization: String? = nil, eduPersonPrincipalName: String? = nil, subjectId: String? = nil, givenName: String? = nil, familyName: String? = nil, eduPersonAffiliations: [String]? = nil, createdAt: Date? = nil, expiresAt: Date? = nil) {
        self.institutionIdentifier = institutionIdentifier
        self.schacHomeOrganization = schacHomeOrganization
        self.eduPersonPrincipalName = eduPersonPrincipalName
        self.subjectId = subjectId
        self.givenName = givenName
        self.familyName = familyName
        self.eduPersonAffiliations = eduPersonAffiliations
        self.createdAt = createdAt
        self.expiresAt = expiresAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case institutionIdentifier
        case schacHomeOrganization
        case eduPersonPrincipalName
        case subjectId
        case givenName
        case familyName
        case eduPersonAffiliations
        case createdAt
        case expiresAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(institutionIdentifier, forKey: .institutionIdentifier)
        try container.encodeIfPresent(schacHomeOrganization, forKey: .schacHomeOrganization)
        try container.encodeIfPresent(eduPersonPrincipalName, forKey: .eduPersonPrincipalName)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(givenName, forKey: .givenName)
        try container.encodeIfPresent(familyName, forKey: .familyName)
        try container.encodeIfPresent(eduPersonAffiliations, forKey: .eduPersonAffiliations)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(expiresAt, forKey: .expiresAt)
    }
}

